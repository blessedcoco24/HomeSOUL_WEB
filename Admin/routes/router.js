const express = require('express')
const router = express.Router()
const mongoose = require('mongoose');
const multer = require('multer');


// const multer = require('multer'); 
const path = require('path');
router.get('/',(req,res)=>{
    res.send('OK')
})

//===import model
const Product = require('../models/Product')




// üîπ C·∫•u h√¨nh Multer: ƒê·ªãnh nghƒ©a storage TR∆Ø·ªöC KHI s·ª≠ d·ª•ng
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
      cb(null, 'H:/HOC TK WEB/DoAn/HomeSoul/src/assets/img/'); // Th∆∞ m·ª•c l∆∞u ·∫£nh
    },
    filename: (req, file, cb) => {
      cb(null, Date.now() + path.extname(file.originalname)); // ƒê·ªïi t√™n file
    }
  });
  const upload = multer({ storage });





//----------------------------------------
// ========get all products
router.get("/sanpham",async(req,res)=>{
    try{
        let products = await Product.find()
        res.json(products)
    } catch (err){
        res.json({message: err.message})
    }
})




// // GET s·∫£n ph·∫©m theo ID

router.get('/sanpham/:id', async (req, res) => {
    try {
        console.log("Received raw ID:", req.params.id);

        if (!mongoose.Types.ObjectId.isValid(req.params.id.trim())) {
            return res.status(400).json({ message: "Invalid ID format" });
        }

        const productId = new mongoose.Types.ObjectId(req.params.id.trim());
        console.log("Converted ObjectId:", productId);

        const product = await Product.findById(productId);
        console.log("Product found:", product);

        if (!product) {
            return res.status(404).json({ message: "Product not found" });
        }

        res.json(product);
    } catch (err) {
        console.error("Error fetching product:", err);
        res.status(500).json({ message: err.message });
    }
});

router.put("/sanpham/:id", async (req, res) => {
    console.log("üõ† Nh·∫≠n request PUT, ID:", req.params.id);
    console.log("üì• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);

    try {
        const productId = req.params.id.trim();

        if (!mongoose.Types.ObjectId.isValid(productId)) {
            return res.status(400).json({ message: "‚ùå Invalid product ID" });
        }

        if (!req.body || Object.keys(req.body).length === 0) {
            return res.status(400).json({ message: "‚ùå Request body tr·ªëng!" });
        }

        // Ch·ªâ c·∫≠p nh·∫≠t c√°c field c√≥ trong DB
        const updateFields = {};
        const allowedFields = ["T√™n s·∫£n ph·∫©m", "Gi√° hi·ªán t·∫°i", "M√¥ t·∫£", "K√≠ch th∆∞·ªõc & Ch·∫•t li·ªáu", "SKU", "ƒê√°nh gi√°", "·∫¢nh s·∫£n ph·∫©m"];

        for (let key of allowedFields) {
            if (req.body[key] !== undefined) {
                updateFields[key] = req.body[key];
            }
        }

        console.log("‚úÖ C·∫≠p nh·∫≠t v·ªõi:", updateFields);

        const updatedProduct = await Product.findByIdAndUpdate(
            productId,
            { $set: updateFields },
            { new: true }
        );

        if (!updatedProduct) {
            return res.status(404).json({ message: "‚ùå Product not found" });
        }

        res.json({ message: "‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!", data: updatedProduct });
    } catch (err) {
        console.error("‚ùå L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", err);
        res.status(500).json({ message: "L·ªói server: " + err.message });
    }
});



router.patch("/sanpham/:id", async (req, res) => {
    try {
        const productId = req.params.id.trim()
        await Product.updateOne(
            
            { _id: req.params.id },
            {
                $set: {
                    "T√™n s·∫£n ph·∫©m": req.body["T√™n s·∫£n ph·∫©m"],
                    "Gi√° hi·ªán t·∫°i": req.body["Gi√° hi·ªán t·∫°i"],
                    "M√¥ t·∫£": req.body["M√¥ t·∫£"],
                    "K√≠ch th∆∞·ªõc & Ch·∫•t li·ªáu": req.body["K√≠ch th∆∞·ªõc & Ch·∫•t li·ªáu"],
                    "SKU": req.body["SKU"]
                }
            }
        );
        res.json({ message: "success" });
    } catch (err) {
        res.json({ message: err.message });
    }
});




// ======= post product
router.post('/them-san-pham', async (req, res) => {
    try {
        console.log("üì© D·ªØ li·ªáu nh·∫≠n t·ª´ client:", req.body); // Ki·ªÉm tra d·ªØ li·ªáu g·ª≠i l√™n

        const { productName, productPrice, productDescription, productSKU, isVisible, productImage } = req.body;

        if (!productName || !productPrice || !productDescription || !productSKU) {
            return res.status(400).json({ message: "‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m!" });
        }

        const newProduct = new Product({
            "T√™n s·∫£n ph·∫©m": productName,
            "Gi√° hi·ªán t·∫°i": productPrice,
            "M√¥ t·∫£": productDescription,
            "SKU": productSKU,
            isVisible: isVisible ?? true,
            "·∫¢nh s·∫£n ph·∫©m": productImage || "" // Tr√°nh l·ªói khi ·∫£nh ch∆∞a c√≥
        });

        await newProduct.save();
        res.status(201).json({ message: "‚úÖ S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m!", product: newProduct });
    } catch (error) {
        console.error("üî• L·ªñI SERVER:", error);
        res.status(500).json({ message: "‚ùå L·ªói khi th√™m s·∫£n ph·∫©m", error: error.message });
    }
});

// router.post('/them-san-pham', async (req, res) => {
//     try {
//         const { productName, productPrice, productDescription, productSKU, isVisible } = req.body;

//         // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
//         if (!productName || !productPrice || !productDescription || !productSKU) {
//             return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m!" });
//         }

//         // T·∫°o s·∫£n ph·∫©m m·ªõi
//         const newProduct = new Product({
//             "T√™n s·∫£n ph·∫©m": productName,
//             "Gi√° hi·ªán t·∫°i": productPrice,
//             "M√¥ t·∫£": productDescription,
//             "SKU": productSKU,
//             isVisible: isVisible ?? true,
//             "·∫¢nh s·∫£n ph·∫©m": productImage 
//         });

//         // L∆∞u v√†o MongoDB
//         await newProduct.save();
//         res.status(201).json({ message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m!", product: newProduct });
//     } catch (error) {
//         res.status(500).json({ message: "L·ªói khi th√™m s·∫£n ph·∫©m", error });
//     }
// });

//=================·∫£nh

// ‚úÖ API UPLOAD ·∫¢NH
router.post('/upload', upload.single('image'), (req, res) => {
  if (!req.file) {
    return res.status(400).json({ message: 'Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n!' });
  }
  const imageUrl = `assets/img/${req.file.filename}`; // ƒê∆∞·ªùng d·∫´n t∆∞∆°
  res.json({
    message: 'T·∫£i ·∫£nh l√™n th√†nh c√¥ng!',
    imageUrl: imageUrl // Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ·∫£nh
  });
});

// router.post("/product", async (req,res)=>{
//     console.log(req.body)
//     const product = new Product({
//         name: req.body.name,
//         price: req.body.price,
//     })

// try {
//     const saveProduct = await product.save()
//     console.log(saveProduct)
//     // res.send("Server receive data")
//     res.json({message: "success"})
// } catch (err){
//     res.json({message: err.message})
// }
// })




// -----------------------------------------
// ======update product
// router.patch("/:id", async (req,res)=>{
//     //console.log(req.body)
//     try {
//         await Product.updateOne(
//             {_id: req.params.id},
//             {$set: {name: req.body.name, price: req.body.price}}
//         )
//         res.json({message:"success"})
//     } catch (err){
//         res.json({message: err.message})
//     }
// })

//-------------------------------
// //==========delete product
// router.delete("/:id", async (req,res)=>{
//     try {
//         await Product.deleteOne(
//             {_id: req.params.id},
//             // {$set: {name: req.body.name, price: req.body.price}}
//         )
//         res.json({message:"success"})
//     } catch (err){
//         res.json({message: err.message})
//     }
// })
// // ---------------
// router.put("/:id", async (req, res) => {
//     try {
//       const updatedProduct = await Product.findByIdAndUpdate(
//         req.params.id,
//         req.body,
//         { new: true } // Tr·∫£ v·ªÅ s·∫£n ph·∫©m sau khi c·∫≠p nh·∫≠t
//       );
//       if (!updatedProduct) {
//         return res.status(404).json({ message: "Product not found" });
//       }
//       res.json(updatedProduct);
//     } catch (err) {
//       res.status(500).json({ message: err.message });
//     }
//   });
  




// ==NH·ªö EXPORT ROUTER====
module.exports = router