// product-management.component.ts
import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { ProductdataService } from '../service/productdata.service';
import { HttpClient } from '@angular/common/http';


@Component({
  selector: 'app-qlsanpham',
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './qlsanpham.component.html',
  styleUrl: './qlsanpham.component.css'
})
export class QlsanphamComponent implements OnInit  {

// Th√™m c√°c thu·ªôc t√≠nh m·ªõi

    // Search and filter variables
    searchKeyword: string = '';
    searchCode: string = '';
    hasSelectedProducts: boolean = false;
    filteredProducts: any[] = [];
    selectedCategory: string = '';
    allProducts: any[] = []; // D·ªØ li·ªáu g·ªëc t·ª´ DB
   
    // Data variables
    products: any[] = [];
    allSelected: boolean = false;
    categoryNames: { [key: string]: string } = {
      ban: 'B√†n',
      bo_banan: 'B·ªô b√†n ƒÉn',
      ghe: 'Gh·∫ø',
      ghesofa: 'Gh·∫ø sofa',
      giuongngu: 'Gi∆∞·ªùng ng·ªß',
      tu_ke: 'T·ªß k·ªá',
      combo: 'Combo n·ªôi th·∫•t'
    };
    errMsg: string = '';
    editedProduct: any = {};

    constructor(  private route: ActivatedRoute, private productdataService: ProductdataService, private _http: HttpClient,private router: Router ) { }
 
    ngOnInit(): void {
      this.getProducts();
      this.loadProducts();

      const productId = "67d9855e332806af2a573b0c"; // L·∫•y t·ª´ route ho·∫∑c state
      this.fetchProduct(productId);
      
    } 
    fetchProduct(productId: string) {
      this._http.get(`http://localhost:3000/sanpham/${productId}`).subscribe(
        (product) => {
          console.log("Product fetched:", product);
          this.editedProduct = product;
        },
        (error) => console.error("Error fetching product:", error)
      );
    }

    
    


 
    getProducts(): void {
        this.productdataService.getProducts().subscribe(
          (data) => {
            this.products = data.map((p: any) => ({
              ...p,
              isVisible: p.isVisible !== undefined ? p.isVisible : true // M·∫∑c ƒë·ªãnh hi·ªán s·∫£n ph·∫©m
            }));
          },
          (error) => {
            console.error('Error fetching products:', error);
          }
        );
      }
      
// T·∫°o m·ªôt h√†m ƒë·ªÉ t·ª± ƒë·ªông g√°n danh m·ª•c n·∫øu kh√¥ng c√≥
getProductCategory(product: any): string {
  if (product['Danh m·ª•c']) {
    return this.categoryNames[product['Danh m·ª•c']] || 'Kh√¥ng c√≥ danh m·ª•c';
  }

  // N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ danh m·ª•c, c√≥ th·ªÉ g√°n d·ª±a tr√™n t√™n s·∫£n ph·∫©m
  if (product['T√™n s·∫£n ph·∫©m'].toLowerCase().includes('b√†n')) return "B√†n";
  if (product['T√™n s·∫£n ph·∫©m'].toLowerCase().includes('gh·∫ø')) return "Gh·∫ø";
  if (product['T√™n s·∫£n ph·∫©m'].toLowerCase().includes('t·ªß')) return "T·ªß";
  if (product['T√™n s·∫£n ph·∫©m'].toLowerCase().includes('gi∆∞·ªùng')) return "Gi∆∞·ªùng";
  if (product['T√™n s·∫£n ph·∫©m'].toLowerCase().includes('combo')) return "Combo n·ªôi th·∫•t";

  return "Kh√¥ng c√≥ danh m·ª•c"; // Tr∆∞·ªùng h·ª£p kh√¥ng x√°c ƒë·ªãnh
}

searchProducts() {
  console.log('Selected Category:', this.selectedCategory);
  console.log('Search Keyword:', this.searchKeyword);

  this.filteredProducts = this.allProducts.filter(product => {
    const productName = product['T√™n s·∫£n ph·∫©m']?.toLowerCase() || '';
    const categoryName = this.selectedCategory?.toLowerCase() || '';

    console.log('Product Name:', productName);

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán danh m·ª•c
    let matchesCategory = true;
    if (this.selectedCategory && this.selectedCategory !== 'all') {
      matchesCategory = productName.includes(categoryName);
    }

    console.log('Matches Category:', matchesCategory);

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán t·ª´ kh√≥a t√¨m ki·∫øm
    let matchesKeyword = true;
    if (this.searchKeyword) {
      matchesKeyword = productName.includes(this.searchKeyword.toLowerCase());
    }

    console.log('Matches Keyword:', matchesKeyword);

    return matchesCategory && matchesKeyword;
  });

  console.log('Filtered Products:', this.filteredProducts);
}



    editSingleProduct(product: any): void {
      product.isEditing = true;
      this.editedProduct = { ...product };
    }
  
    cancelEditSingleProduct(product: any): void {
      product.isEditing = false;
    }

submitProduct(product: any) {
  if (!product || !product._id) {
    console.error("S·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu ID");
    return;
  }

  const updateData = {
    "T√™n s·∫£n ph·∫©m": product["T√™n s·∫£n ph·∫©m"],
    "Gi√° hi·ªán t·∫°i": product["Gi√° hi·ªán t·∫°i"],
    "M√¥ t·∫£": product["M√¥ t·∫£"],
    "K√≠ch th∆∞·ªõc & Ch·∫•t li·ªáu": product["K√≠ch th∆∞·ªõc & Ch·∫•t li·ªáu"],
    "SKU": product["SKU"],
    "ƒê√°nh gi√°": product["ƒê√°nh gi√°"],
    "·∫¢nh s·∫£n ph·∫©m": product["·∫¢nh s·∫£n ph·∫©m"]
  };
  console.log("üì§ G·ª≠i request c·∫≠p nh·∫≠t:", updateData);

  this._http.put(`http://localhost:3000/sanpham/${product._id}`, updateData)
    .subscribe(
      (res) => {
        console.log("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng:", res);
        alert("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
        this.loadProducts(); // Load l·∫°i danh s√°ch
      },
      (error) => {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error);
        alert("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
      }
    );
}
  

loadProducts() {
  this._http.get<any[]>('http://localhost:3000/sanpham').subscribe(data => {
    this.allProducts = data.map(product => ({
      ...product,
      category: this.getCategory(product["T√™n s·∫£n ph·∫©m"])
    }));
    this.products = [...this.allProducts]; // Hi·ªÉn th·ªã ban ƒë·∫ßu
    this.filterProducts();
  });
}



getCategory(productName: string): string {
  if (productName.includes("B√†n")) return "ban";
  if (productName.includes("Gh·∫ø")) return "ghe";
  return "all";
}

filterProducts() {
  this.searchProducts();
}

    toggleProductVisibility(product: any): void {
      product.isVisible = !product.isVisible;
      this.productdataService.updateProductVisibility(product._id, product.isVisible).subscribe(
        () => {},
        (error) => {
          console.error('Error updating product visibility:', error);
        }
      );
    }


    

    updateProduct() {
      console.log("Submitting product:", this.editedProduct);
      this.productdataService.updateProduct(this.editedProduct._id, this.editedProduct)
        .subscribe(
          response => console.log("Update success:", response),
          error => console.error("Update error:", error)
        );
    }
    

    
  
    toggleSelectAll(): void {
      this.allSelected = !this.allSelected;
      this.products.forEach(product => product.selected = this.allSelected);
      this.updateHasSelectedProducts();
    }
  
    toggleProductSelection(product: any): void {
      product.selected = !product.selected;
      this.updateHasSelectedProducts();
    }
  
    updateHasSelectedProducts(): void {
      this.hasSelectedProducts = this.products.some(product => product.selected);
    }
  
    editMultipleProducts(): void {
      console.log('Ch·ªânh s·ª≠a nhi·ªÅu s·∫£n ph·∫©m');
    }
// them m·ªõi

showAddOptions: boolean = false;

openAddOptions() {
  this.showAddOptions = true;
}

closeAddOptions() {
  this.showAddOptions = false;
}

navigateToAddProduct() {
  this.router.navigate(['/them-san-pham']);
}

navigateToAddCategory() {
  this.router.navigate(['/']);
}


  }
